//package ahjd.asgDatabase.example;
//
//import ahjd.asgDatabase.api.DatabaseAPI;
//import org.bukkit.Bukkit;
//import org.bukkit.ChatColor;
//import org.bukkit.command.Command;
//import org.bukkit.command.CommandExecutor;
//import org.bukkit.command.CommandSender;
//import org.bukkit.entity.Player;
//import org.bukkit.plugin.RegisteredServiceProvider;
//import org.bukkit.plugin.java.JavaPlugin;
//
//import java.util.HashMap;
//import java.util.Map;
//import java.util.UUID;
//
///**
// * This is a comprehensive example of how to use the AsgDatabase API in your plugin.
// * This class demonstrates pure database communication without player listeners.
// * It is not meant to be used directly, but rather as a reference for other plugin developers.
// */
//public class ExampleUsage extends JavaPlugin {
//
//    private DatabaseAPI databaseAPI;
//
//    @Override
//    public void onEnable() {
//        // Method 1: Get the API from the services manager
//        RegisteredServiceProvider<DatabaseAPI> provider = getServer().getServicesManager().getRegistration(DatabaseAPI.class);
//        
//        if (provider == null) {
//            getLogger().severe("AsgDatabase plugin not found! Disabling plugin.");
//            getServer().getPluginManager().disablePlugin(this);
//            return;
//        }
//        
//        databaseAPI = provider.getProvider();
//        
//        // Alternative Method 2: Get the API directly from the plugin
//        // AsgDatabase asgDatabase = (AsgDatabase) getServer().getPluginManager().getPlugin("AsgDatabase");
//        // if (asgDatabase == null) {
//        //     getLogger().severe("AsgDatabase plugin not found! Disabling plugin.");
//        //     getServer().getPluginManager().disablePlugin(this);
//        //     return;
//        // }
//        // databaseAPI = asgDatabase.getDatabaseAPI();
//        
//        // No event listeners needed for pure database functionality
//        
//        // Register commands
//        getCommand("points").setExecutor(new PointsCommand(this));
//        
//        // Save some global plugin data
//        databaseAPI.saveGlobalData(getName(), "version", getDescription().getVersion());
//        databaseAPI.saveGlobalData(getName(), "enableTime", System.currentTimeMillis());
//        
//        getLogger().info("ExampleUsage has been enabled!");
//    }
//    
//    @Override
//    public void onDisable() {
//        // Save disable time as global data
//        if (databaseAPI != null) {
//            databaseAPI.saveGlobalData(getName(), "disableTime", System.currentTimeMillis());
//        }
//        
//        getLogger().info("ExampleUsage has been disabled!");
//    }
//    
//    /**
//     * Initializes a player's data in the database.
//     * This would be called manually when needed, not through event listeners.
//     * 
//     * @param player The player to initialize data for
//     */
//    public void initializePlayerData(Player player) {
//        UUID uuid = player.getUniqueId();
//        
//        // Check if player has data
//        if (!databaseAPI.hasPlayerData(uuid, getName())) {
//            // Create new player data
//            Map<String, Object> data = new HashMap<>();
//            data.put("points", 0);
//            data.put("level", 1);
//            data.put("firstJoin", System.currentTimeMillis());
//            data.put("lastUpdate", System.currentTimeMillis());
//            
//            databaseAPI.savePlayerData(uuid, getName(), data);
//            player.sendMessage(ChatColor.GREEN + "Your data has been initialized! You have been given 0 points.");
//        }
//    }
//    
//    /**
//     * Updates a player's login information.
//     * This would be called manually when needed, not through event listeners.
//     * 
//     * @param player The player to update login info for
//     */
//    public void updatePlayerLogin(Player player) {
//        UUID uuid = player.getUniqueId();
//        
//        if (databaseAPI.hasPlayerData(uuid, getName())) {
//            // Update existing player data
//            Map<String, Object> data = databaseAPI.getPlayerData(uuid, getName());
//            int points = Integer.parseInt(data.get("points").toString());
//            int level = Integer.parseInt(data.get("level").toString());
//            
//            player.sendMessage(ChatColor.GREEN + "Welcome back! You have " + points + " points and are level " + level + ".");
//            
//            // Update last login time
//            data.put("lastLogin", System.currentTimeMillis());
//            data.put("lastUpdate", System.currentTimeMillis());
//            databaseAPI.savePlayerData(uuid, getName(), data);
//        } else {
//            // Initialize player data if it doesn't exist
//            initializePlayerData(player);
//        }
//    }
//    }
//    
//    /**
//     * Gets the database API instance.
//     * 
//     * @return The database API instance
//     */
//    public DatabaseAPI getDatabaseAPI() {
//        return databaseAPI;
//    }
//    
//    /**
//     * Example method to add points to a player.
//     * 
//     * @param player The player to add points to
//     * @param points The number of points to add
//     */
//    public void addPoints(Player player, int points) {
//        UUID uuid = player.getUniqueId();
//        
//        // Get existing data
//        Map<String, Object> data = databaseAPI.getPlayerData(uuid, getName());
//        if (data == null) {
//            data = new HashMap<>();
//            data.put("points", points);
//            data.put("level", 1);
//            data.put("firstJoin", System.currentTimeMillis());
//            data.put("lastUpdate", System.currentTimeMillis());
//        } else {
//            // Update points
//            int currentPoints = Integer.parseInt(data.get("points").toString());
//            data.put("points", currentPoints + points);
//            
//            // Check if player should level up (example: level up every 100 points)
//            int currentLevel = Integer.parseInt(data.get("level").toString());
//            int newLevel = ((currentPoints + points) / 100) + 1;
//            
//            if (newLevel > currentLevel) {
//                data.put("level", newLevel);
//                player.sendMessage(ChatColor.GOLD + "Congratulations! You've reached level " + newLevel + "!");
//            }
//            
//            // Update last update time
//            data.put("lastUpdate", System.currentTimeMillis());
//        }
//        
//        // Save updated data
//        databaseAPI.savePlayerData(uuid, getName(), data);
//        player.sendMessage(ChatColor.GREEN + "You've earned " + points + " points!");
//    }
//    
//    /**
//     * Example method to get a player's points.
//     * 
//     * @param player The player to get points for
//     * @return The player's points, or 0 if the player has no data
//     */
//    public int getPoints(Player player) {
//        UUID uuid = player.getUniqueId();
//        
//        // Get existing data
//        Map<String, Object> data = databaseAPI.getPlayerData(uuid, getName());
//        if (data == null || !data.containsKey("points")) {
//            return 0;
//        }
//        
//        return Integer.parseInt(data.get("points").toString());
//    }
//    
//    /**
//     * Example method to get a player's level.
//     * 
//     * @param player The player to get level for
//     * @return The player's level, or 1 if the player has no data
//     */
//    public int getLevel(Player player) {
//        UUID uuid = player.getUniqueId();
//        
//        // Get existing data
//        Map<String, Object> data = getDatabaseAPI().getPlayerData(uuid, getName());
//        if (data == null || !data.containsKey("level")) {
//            return 1;
//        }
//        
//        return Integer.parseInt(data.get("level").toString());
//    }


//  /**
//     * Example command to manage player points.
//     */
//    public class PointsCommand implements CommandExecutor {
//        
//        private final ExampleUsage plugin;
//        
//        public PointsCommand(ExampleUsage plugin) {
//            this.plugin = plugin;
//        }
//        
//        @Override
//        public boolean onCommand(CommandSender sender, Command command, String label, String[] args) {
//            if (args.length == 0) {
//                // Show help
//                sender.sendMessage(ChatColor.GOLD + "=== Points Commands ===");
//                sender.sendMessage(ChatColor.YELLOW + "/points" + ChatColor.WHITE + " - Show this help message");
//                sender.sendMessage(ChatColor.YELLOW + "/points check [player]" + ChatColor.WHITE + " - Check your or another player's points");
//                sender.sendMessage(ChatColor.YELLOW + "/points add <player> <amount>" + ChatColor.WHITE + " - Add points to a player");
//                sender.sendMessage(ChatColor.YELLOW + "/points set <player> <amount>" + ChatColor.WHITE + " - Set a player's points");
//                return true;
//            }
//            
//            switch (args[0].toLowerCase()) {
//                case "check":
//                    if (args.length == 1) {
//                        // Check own points
//                        if (!(sender instanceof Player)) {
//                            sender.sendMessage(ChatColor.RED + "You must be a player to check your own points.");
//                            return true;
//                        }
//                        
//                        Player player = (Player) sender;
//                        int points = plugin.getPoints(player);
//                        int level = plugin.getLevel(player);
//                        
//                        sender.sendMessage(ChatColor.GREEN + "You have " + points + " points and are level " + level + ".");
//                    } else {
//                        // Check another player's points
//                        Player target = Bukkit.getPlayer(args[1]);
//                        if (target == null) {
//                            sender.sendMessage(ChatColor.RED + "Player not found: " + args[1]);
//                            return true;
//                        }
//                        
//                        int points = plugin.getPoints(target);
//                        int level = plugin.getLevel(target);
//                        
//                        sender.sendMessage(ChatColor.GREEN + target.getName() + " has " + points + " points and is level " + level + ".");
//                    }
//                    break;
//                    
//                case "add":
//                    if (!sender.hasPermission("exampleusage.points.add")) {
//                        sender.sendMessage(ChatColor.RED + "You don't have permission to add points.");
//                        return true;
//                    }
//                    
//                    if (args.length < 3) {
//                        sender.sendMessage(ChatColor.RED + "Usage: /points add <player> <amount>");
//                        return true;
//                    }
//                    
//                    Player target = Bukkit.getPlayer(args[1]);
//                    if (target == null) {
//                        sender.sendMessage(ChatColor.RED + "Player not found: " + args[1]);
//                        return true;
//                    }
//                    
//                    try {
//                        int amount = Integer.parseInt(args[2]);
//                        if (amount <= 0) {
//                            sender.sendMessage(ChatColor.RED + "Amount must be positive.");
//                            return true;
//                        }
//                        
//                        plugin.addPoints(target, amount);
//                        sender.sendMessage(ChatColor.GREEN + "Added " + amount + " points to " + target.getName() + ".");
//                    } catch (NumberFormatException e) {
//                        sender.sendMessage(ChatColor.RED + "Invalid amount: " + args[2]);
//                    }
//                    break;
//                    
//                case "set":
//                    if (!sender.hasPermission("exampleusage.points.set")) {
//                        sender.sendMessage(ChatColor.RED + "You don't have permission to set points.");
//                        return true;
//                    }
//                    
//                    if (args.length < 3) {
//                        sender.sendMessage(ChatColor.RED + "Usage: /points set <player> <amount>");
//                        return true;
//                    }
//                    
//                    Player targetPlayer = Bukkit.getPlayer(args[1]);
//                    if (targetPlayer == null) {
//                        sender.sendMessage(ChatColor.RED + "Player not found: " + args[1]);
//                        return true;
//                    }
//                    
//                    try {
//                        int amount = Integer.parseInt(args[2]);
//                        if (amount < 0) {
//                            sender.sendMessage(ChatColor.RED + "Amount must be non-negative.");
//                            return true;
//                        }
//                        
//                        // Get existing data
//                        UUID uuid = targetPlayer.getUniqueId();
//                        Map<String, Object> data = plugin.getDatabaseAPI().getPlayerData(uuid, plugin.getName());
//                        if (data == null) {
//                            data = new HashMap<>();
//                            data.put("firstJoin", System.currentTimeMillis());
//                        }
//                        
//                        // Set points and recalculate level
//                        data.put("points", amount);
//                        data.put("level", (amount / 100) + 1);
//                        data.put("lastUpdate", System.currentTimeMillis());
//                        
//                        // Save updated data
//                        plugin.getDatabaseAPI().savePlayerData(uuid, plugin.getName(), data);
//                        
//                        sender.sendMessage(ChatColor.GREEN + "Set " + targetPlayer.getName() + "'s points to " + amount + ".");
//                        targetPlayer.sendMessage(ChatColor.GREEN + "Your points have been set to " + amount + ".");
//                    } catch (NumberFormatException e) {
//                        sender.sendMessage(ChatColor.RED + "Invalid amount: " + args[2]);
//                    }
//                    break;
//                    
//                default:
//                    sender.sendMessage(ChatColor.RED + "Unknown command. Type /points for help.");
//                    break;
//            }
//            
//            return true;
//        }
//    }
}